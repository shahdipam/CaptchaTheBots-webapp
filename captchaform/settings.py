"""
Django settings for captchaform project.

Generated by 'django-admin startproject' using Django 4.2.6.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
import os
from keras.models import load_model
from tensorflow.keras.datasets import cifar10
from tensorflow.keras.utils import to_categorical
import numpy as np


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-ml1-u3x3b82hr7c2eel%^syffo@(z#cq$*%j!-8!58j-0v+re4'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'v2captcha',
    # IMP to fix capthca issue
    'captcha'

]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'captchaform.urls'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
MEDIA_URL = '/media/'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'captchaform.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'

STATICFILES_DIRS = [
    os.path.join(BASE_DIR, "templates/static/"), 
]

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# V2 Keys
RECAPTCHA_PUBLIC_KEY = '6LdYo8EoAAAAAHvvueBhuJG5L2ifm_HNts8EmZsj'
RECAPTCHA_PRIVATE_KEY = '6LdYo8EoAAAAAGxUp4rZqXLBpESIphYEVeQz45TK'

# V3 Keys
V3RECAPTCHA_PUBLIC_KEY = "6LeGFsEoAAAAAO5w-kDQ7ux1uG9ZKy7AO1sOC3fd"
V3RECAPTCHA_PRIVATE_KEY = "6LeGFsEoAAAAAFsUqZEboHkTSKE679lni8GS1oNz"

# model = load_model('cnn_20_epochs.h5')
# (X_train, y_train), (X_test, y_test) = cifar10.load_data()







# import tensorflow as tf
# import matplotlib.pyplot as plt
# import random

# # Load the CIFAR-10 dataset
# (x_train, y_train), (_, _) = tf.keras.datasets.cifar10.load_data()

# # Get 4 random labels
# random_labels = random.sample(range(10), 4)

# # Get 9 random images with 4 of them having the same label
# RANDOM_IMAGES = []
# random_categories = []
# for label in random_labels:
#     label_indices = [i for i, y in enumerate(y_train) if y == label]
#     random_indices = random.sample(label_indices, 1)
#     RANDOM_IMAGES.append(x_train[random_indices[0]])
#     random_categories.append(label)

# # Get 5 additional random images
# additional_indices = random.sample(range(len(x_train)), 5)
# for index in additional_indices:
#     RANDOM_IMAGES.append(x_train[index])
#     random_categories.append(y_train[index][0])

