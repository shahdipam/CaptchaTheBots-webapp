"""
Django settings for captchaform project.

Generated by 'django-admin startproject' using Django 4.2.6.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
import os
from keras.models import load_model
from tensorflow.keras.datasets import cifar10
from tensorflow.keras.utils import to_categorical
import numpy as np


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-ml1-u3x3b82hr7c2eel%^syffo@(z#cq$*%j!-8!58j-0v+re4'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'v2captcha',
    # IMP to fix capthca issue
    'captcha'

]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'captchaform.urls'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
MEDIA_URL = '/media/'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'captchaform.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'

STATICFILES_DIRS = [
    os.path.join(BASE_DIR, "templates/static/"), 
]

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# V2 Keys
RECAPTCHA_PUBLIC_KEY = '6LdYo8EoAAAAAHvvueBhuJG5L2ifm_HNts8EmZsj'
RECAPTCHA_PRIVATE_KEY = '6LdYo8EoAAAAAGxUp4rZqXLBpESIphYEVeQz45TK'

# V3 Keys
V3RECAPTCHA_PUBLIC_KEY = "6LeGFsEoAAAAAO5w-kDQ7ux1uG9ZKy7AO1sOC3fd"
V3RECAPTCHA_PRIVATE_KEY = "6LeGFsEoAAAAAFsUqZEboHkTSKE679lni8GS1oNz"

import numpy as np 
import pandas as pd 
import os
from keras.preprocessing.image import ImageDataGenerator
import tensorflow as tf
from keras.models import Sequential
from keras.models import Model
from keras.callbacks import ModelCheckpoint, LearningRateScheduler, EarlyStopping, ReduceLROnPlateau, TensorBoard
from tensorflow.keras import optimizers, losses, activations, models
from keras.layers import Convolution2D, Dense, Input, Flatten, Dropout, MaxPooling2D, BatchNormalization, GlobalAveragePooling2D, Concatenate
from art.estimators.classification import KerasClassifier
# tf.compat.v1.disable_eager_execution()


src_path_train = str(BASE_DIR)+"/templates/static/"
batch_size = 64

train_datagen = ImageDataGenerator(
        rescale=1 / 255.0,
        #rotation_range=20,
        zoom_range=0.05,
        #width_shift_range=0.05,
        #height_shift_range=0.05,
        #shear_range=0.05,
        horizontal_flip=True,
        #fill_mode="nearest",
        validation_split=0.20)


train_generator = train_datagen.flow_from_directory(
    directory=src_path_train,
    target_size=(150, 150),
    color_mode="rgb",
    batch_size=batch_size,
    class_mode="categorical",
    subset='training',
    shuffle=True,
    seed=42
)

valid_generator = train_datagen.flow_from_directory(
    directory=src_path_train,
    target_size=(150, 150),
    color_mode="rgb",
    batch_size=batch_size,
    class_mode="categorical",
    subset='validation',
    shuffle=True,
    seed=42
)

MODEL = tf.keras.models.load_model(str(BASE_DIR)+'/GoogleRecaptcha_81.h5')
MODEL.compile(loss='categorical_crossentropy', 
              optimizer=optimizers.Adam(lr=1e-3),
              metrics=['accuracy'])
# CLASSIFIER = classifier = KerasClassifier(clip_values=(0, 255), model=MODEL)


LABEL_NAMES = ['Bicycle', 'Bridge', 'Bus', 'Car', 'Chimney', 'Crosswalk', 'Hydrant',
               'Motorcycle', 'Other', 'Palm', 'Stair', 'Traffic Light']

LABEL_DICT = {label: i for i, label in enumerate(LABEL_NAMES)}

FGSM_DIFF = np.load(str(BASE_DIR)+'/fsgm_attack_diff.npy')
HSJ_DIFF = np.load(str(BASE_DIR)+'/hopskip_attack_diff.npy')
PGD_DIFF = np.load(str(BASE_DIR)+'/pgd_attack_diff.npy')



# Resize the array to shape (150, 150, 3) and fill missing values with 255
HSJ_ARR = np.zeros((150, 150, 3), dtype=np.uint8) + 255
HSJ_ARR[:HSJ_DIFF.shape[0], :HSJ_DIFF.shape[1], :] = HSJ_DIFF


# Resize the array to shape (150, 150, 3) and fill missing values with 255
PGD_ARR = np.zeros((150, 150, 3), dtype=np.uint8) + 255
PGD_ARR[:PGD_DIFF.shape[0], :PGD_DIFF.shape[1], :] = PGD_DIFF


# import random
# # MODEL.evaluate(valid_generator)

# X_train, y_train = train_generator.next()
# rand_idx = random.randint(10,1)

# image = X_train[rand_idx]
# label = LABEL_NAMES[rand_idx]
# image = np.expand_dims(image, axis=0)

# print(LABEL_NAMES[MODEL.predict(image).argmax()])